*, *::before, *::after /*all elements*/{
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-weight: normal;
}

body {
    padding: 0;
    margin: 0;
    background: linear-gradient(to right, #00aaff, #00ff6c);
}

.calculator-grid {
    display: grid;
    justify-content: center;
    align-content: center; /* We change align item to align content cause we want to align the whole content to the center not the items themselves. So now the buttons are filling out the space that they need to. How ever, at this point, the double spot buttons is not taking 2 spaces yet.*/
    min-height: 100vh; /*100 view hieght It's basically sying its going to fill 100% of the height all the time.*/
    grid-template-columns: repeat(4, 100px); /* Our columns will repeat 4 times and we want it 100px wide. */
    grid-template-rows: minmax(120px, auto) repeat(5, 100px);
    /* For the rows we want that the output can grow as much as it needs since the numbers input can be a large number. So we put a "minmax value" that at minimum we wanted to be a 120px tall but a max we want it to be "auto" that essentialy says, as large as its needs to be to fit everything. Then after that we want to repeat 5 times the value of 100px.*/
}

/* Positions our buttons*/
.calculator-grid > button {
    cursor: pointer; /*When we hover over them we get a nice pointer*/
    font-size: 2rem;
    border: 1px solid white;
    background-color: rgba(255, 255, 255, .75); /*only 75% opaque and white*/
}

/* we want to add hover to the buttons with 90% opaque*/
.calculator-grid > button:hover {
    background-color: rgba(255, 255, 255, .9);
}

.span-two {
    grid-column: span 2;
    /*In order to make it easier to see what we are styiling I'm going to add a little bit of a dummy text "123 +" to the previous-operand and "456" to the current-operand on the DOM index.HTML. That way we have a little bit of a dummy text we can play around with when we are doing our styles */
}

.output {
    grid-column: 1 / -1; /* we want to make the output span the entire width we have a really nice trick which is called grid-column again but in this case we want to say we want to go from column numer 1 all the way to column number negative -1 which is essentially just the last column*/
    background-color: rgba(0, 0, 0, .75);
    /*Now we want to align the elements (123 +, 456) inside fo put container and the easiest way to do that is going to be using flex */
    display: flex; 
    /* We want to aling the items with a flex-end because we want our items at the right side of our container*/
    align-items: flex-end;
    /* STEP 1: We also want to add as much space as possible between our elements, however by doing so our elements are being lined up side by side instead of vertically.
    STEP 2 after adding padding in last step: We are going to change the space between to space around instead because it will push our limits a little bit closer to each other and a little away from the top and bottom of the container*/
    justify-content: space-around;
    /*By using flex direction-column our items get lined up vertically as we want it.*/
    flex-direction: column;
    /* Now that we have everything pushed up right to the edges of our container we want to adjust that a little bit by adding a little bit of padding to our container as follow  */
    padding: 10px;
    /*
    Last thing we want to do as we wanted things wrap as they get too long so in order to make that happen we need to what's called "word-wrap" which is going to allow us to say where we want to "break our words" so can say we want to be able to break a word in the middle of it, so not just at the end of a word or during a space.*/
    word-wrap: break-word;
    /*
    And we also want to put word break here. We want to be able to break all words. Now if the 456 became too long for example it would just wrap to the next line.*/
    word-break: break-all;
}

/*Last thing we need to do is style our two different text elements that we have. So in order to select those...*/
.output .previous-operand {
    color: rgba(255, 255, 255, .75);
    font-size: 1.5rem;
}
.output .current-operand {
    color: white;
    font-size: 2.5rem;
}

/** SWITCH **/

.button-switch {
    position: relative;
    -webkit-appearance: none;
    width: 30px;
    height: 15px;
    background-color: #d1d4d3;
    border-radius: 40px;
    border: 1px solid #bebebe;
    outline: none;
    transition: 200ms;
    }

    .button-switch:checked {
        background-color: #63d1a6;
        border: 1px solid #63d1a6;
    }
    
    .button-switch:before {
    position: absolute;
    top: 0;
    left: 0;
    content: '';
    width: 13px;
    height: 13px;
    background-color: #fff;
    border-radius: 50%;
    transition: 200ms;
    }
    
    .button-switch:checked:before {
    left: 15px;
    }

    .darktheme.calculator-grid > button {
        background-color: rgba(0, 0, 0, .75);
        color: white;
    }